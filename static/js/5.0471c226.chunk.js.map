{"version":3,"sources":["../../src/Path.tsx","../../src/CircularProgressbar.tsx","../../src/constants.ts","components/Recommend.jsx","components/Modal.jsx","components/SingleMovie.jsx"],"names":["Path","className","counterClockwise","dashRatio","pathRadius","strokeWidth","style","React.createElement","Object","assign","getDashStyle","d","getPathDescription","fillOpacity","rotation","diameter","Math","PI","gapLength","strokeDasharray","strokeDashoffset","React.Component","getBackgroundPadding","this","props","background","backgroundPadding","getPathRadius","getPathRatio","value","minValue","maxValue","min","max","render","circleRatio","classes","styles","text","pathRatio","root","viewBox","cx","cy","r","trail","path","x","y","defaultProps","Recommend","recommends","map","recommend","to","id","src","backdrop_path","alt","title","Modal","useState","active","setActive","video","toggleVideo","undefined","useEffect","onClick","key","width","height","SingleMovie","useContext","FavoriteContext","toggleFavorite","favorites","movie","setMovie","setRecommend","isLoading","setIsLoading","setVideo","activeVideo","setActiveVideo","check","find","favorite","a","params","tmdb","detail","response","console","log","massage","getMovie","getRecommendations","results","getRecommends","getVideos","getVideo","Loading","backgroundImage","apiConfig","w1920Image","w300Image","poster_path","release_date","vote_average","stroke","strokeLinecap","transition","fill","fontSize","status","original_language","vote_count","overview"],"mappings":"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","file":"static/js/5.0471c226.chunk.js","sourcesContent":["import * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n","import * as React from 'react';\n\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types';\n\nclass CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    background: false,\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 8,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  };\n\n  getBackgroundPadding() {\n    if (!this.props.background) {\n      // Don't add padding if not displaying background\n      return 0;\n    }\n    return this.props.backgroundPadding;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n","export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nRecommend.propTypes = {\r\n    recommends: PropTypes.array,\r\n};\r\n\r\nRecommend.defaultProps = {\r\n    recommends: [],\r\n}\r\n\r\nfunction Recommend(props) {\r\n    const { recommends } = props\r\n    const IMG_PATH = \"https://www.themoviedb.org/t/p/w250_and_h141_face\";\r\n    // console.log(recommends)\r\n    return (\r\n        <div className=\"recommend-container\">\r\n            <h3 className=\"recommend__title\">Recommendations</h3>\r\n            <div className=\"recommend scroll\">\r\n                {recommends && recommends.map(recommend => (\r\n                    <div key={recommend.id} className=\"recommend__movie\">\r\n                        <div className=\"recommend__movie-banner\">\r\n                            <Link to={`/detail/${recommend.id}`}>\r\n                                <img src={IMG_PATH + recommend.backdrop_path} alt={recommend.title} />\r\n                            </Link>\r\n                        </div>\r\n                        <div className=\"recommend__movie-title\">{recommend.title}</div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Recommend;","import React, { useEffect, useState } from 'react';\r\n\r\nfunction Modal(props) {\r\n    const [active, setActive] = useState(false)\r\n    let { video, toggleVideo } = props\r\n    if (video === undefined) {\r\n        video = \"\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        setActive(props.active)\r\n    }, [props.active])\r\n\r\n    return (\r\n        <div id={props.id} className={`modal ${active ? 'active' : ''}`} onClick={() => toggleVideo(active)}>\r\n            <div className={`modal_content ${active ? 'active' : ''}`}>\r\n                <iframe\r\n                    src={active ? `https://www.youtube.com/embed/${video.key}?autoplay=1` : \"\"}\r\n                    width=\"80%\" height=\"500px\" title=\"trailer\"\r\n                ></iframe>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;","import React, { useContext, useEffect, useState } from 'react'\r\nimport { CircularProgressbar } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\nimport Recommend from './Recommend';\r\nimport PropTypes from 'prop-types';\r\nimport { FavoriteContext } from '../context/FavoriteContext';\r\nimport Loading from './Loading';\r\nimport tmdb from '../api/tmdbApi'\r\nimport apiConfig from '../api/apiConfig'\r\nimport Modal from './Modal';\r\n\r\nSingleMovie.propTypes = {\r\n    id: PropTypes.string,\r\n}\r\n\r\nSingleMovie.defaultProps = {\r\n    id: '',\r\n}\r\n\r\nfunction SingleMovie(props) {\r\n    const { toggleFavorite, favorites } = useContext(FavoriteContext)\r\n\r\n    const { id } = props\r\n    const [movie, setMovie] = useState({})\r\n    const [recommends, setRecommend] = useState()\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    const [video, setVideo] = useState()\r\n    const [activeVideo, setActiveVideo] = useState(false)\r\n    let check = favorites.find(favorite => favorite === movie.id)\r\n\r\n    // const API_MOVIES = `https://api.themoviedb.org/3/movie/${id}?api_key=04c35731a5ee918f014970082a0088b1&language=en-US`\r\n    // const IMG_PATH = \"https://image.tmdb.org/t/p/w300\";\r\n    // const API_RECOMMEND = `https://api.themoviedb.org/3/movie/${id}/recommendations?api_key=04c35731a5ee918f014970082a0088b1&language=en-US&page=1`\r\n\r\n    useEffect(() => {\r\n        const getMovie = async () => {\r\n            try {\r\n                const params = {}\r\n                const response = await tmdb.detail(id, { params })\r\n                setMovie(response)\r\n                setIsLoading(false)\r\n            } catch (error) {\r\n                console.log(error.massage)\r\n            }\r\n        }\r\n        getMovie()\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        const getRecommends = async () => {\r\n            try {\r\n                const response = await tmdb.getRecommendations(id)\r\n                setRecommend(response.results)\r\n            } catch (error) {\r\n                console.log(error.massage)\r\n            }\r\n        }\r\n        getRecommends()\r\n    }, [id])\r\n\r\n    useEffect(() => {\r\n        const getVideo = async () => {\r\n            try {\r\n                const response = await tmdb.getVideos(id)\r\n                setVideo(response.results[0])\r\n            } catch (error) {\r\n                console.log(error.massage)\r\n            }\r\n        }\r\n        getVideo()\r\n    }, [id])\r\n\r\n    const handleToggleVideo = active => {\r\n        setActiveVideo(!activeVideo)\r\n    }\r\n\r\n    return (\r\n        <div className=\"detail-page row\">\r\n            {\r\n                isLoading ?\r\n                    <Loading /> :\r\n                    (<div className=\"detail-container\">\r\n                        <div className=\"detail-before\" style={{ backgroundImage: `url(${apiConfig.w1920Image(movie.backdrop_path)})` }}>\r\n                            <div className=\"detail\">\r\n                                <div className=\"detail__img\">\r\n                                    <img src={apiConfig.w300Image(movie.poster_path)} alt={movie.title} />\r\n                                </div>\r\n                                <div className=\"detail__content\">\r\n                                    <div className=\"detail__content-name color-white\">\r\n                                        <h3>{movie.title}</h3>\r\n                                        <p>{movie.release_date}</p>\r\n                                    </div>\r\n                                    <div className=\"detail__content-summary\">\r\n                                        <div className=\"detail__content-summary-top\">\r\n                                            <div className=\"detail__content-summary-top-left\">\r\n                                                <CircularProgressbar\r\n                                                    value={movie.vote_average}\r\n                                                    maxValue={10}\r\n                                                    text={movie.vote_average + '/10'}\r\n                                                    styles={{\r\n                                                        path: {\r\n                                                            stroke: `${movie.vote_average >= 7.5 ? '#21d07a' : '#c7ca2e'}`,\r\n                                                            strokeLinecap: 'round',\r\n                                                            transition: 'stroke-dashoffset 0.5s ease 0s',\r\n                                                        },\r\n                                                        trail: {\r\n                                                            stroke: '#053752',\r\n                                                            strokeLinecap: 'round',\r\n                                                        },\r\n                                                        text: {\r\n                                                            fill: `${movie.vote_average >= 7.5 ? '#21d07a' : '#c7ca2e'}`,\r\n                                                            fontSize: '22px',\r\n                                                        },\r\n                                                        background: {\r\n                                                            fill: `${movie.vote_average >= 7.5 ? '#21d07a' : '#c7ca2e'}`\r\n                                                        }\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"detail__content-summary-top-right\">\r\n                                                <span className=\"like-movie\">\r\n                                                    <i className={`icon fas fa-heart ${check ? \"liked\" : \"\"}`} onClick={() => toggleFavorite(movie.id)}></i>\r\n                                                    <div className=\"detail__content-summary-top-right-icon\">Add this movie to your favorite list</div>\r\n                                                </span>\r\n                                                <span className=\"wrap-icon\" onClick={() => setActiveVideo(true)}><i className=\"icon fas fa-play no-bg\"></i>\r\n                                                    Play Trailer\r\n                                                </span>\r\n                                                <Modal video={video} active={activeVideo} toggleVideo={handleToggleVideo} />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"detail__content-summary-bottom\">\r\n                                            <p className=\"color-white\">Status: {movie.status}</p>\r\n                                            <p className=\"color-white\">Language: {movie.original_language}</p>\r\n                                            <p className=\"color-white\">Vote Average: {movie.vote_average}</p>\r\n                                            <p className=\"color-white\">Vote Count: {movie.vote_count}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"detail__content-overview color-white\">\r\n                                        <h3>Overview</h3>\r\n                                        <p>\r\n                                            {movie.overview}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>)\r\n            }\r\n            <Recommend recommends={recommends} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SingleMovie;"],"sourceRoot":""}